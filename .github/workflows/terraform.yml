name: 'Terraform'

on:
  push:
    branches:
    - "main"

permissions:
  contents: read

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag impostor-project-backend

    - name: Connect to dockerhub
      run: docker login -u ${{secrets.DOCKER_LOGIN}} -p ${{secrets.DOCKER_PASSWORD}}
    
    - name: Push to dockerhub
      run: docker push impostor-project-backend

  terraform:
    needs: docker
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Setup credentials
    - name: Configure aws creds
      run: aws --profile default configure set aws_access_key_id ${{ secrets.ACCESS_KEY }} && aws --profile default configure set aws_secret_access_key ${{ secrets.SECRET_KEY }}

    # Move to folder
    - name: Move to folder
      run: mv terraform/* .

    #  Create vars file
    - name: Create vars file (ACCESS)
      run: echo access_key = \"${{ secrets.ACCESS_KEY }}\" > variables.tfvars 
    
    - name: Create vars file (SECRET)
      run: echo secret_key = \"${{ secrets.SECRET_KEY }}\" >> variables.tfvars

    # Create ssh key
    - name: create ssh key
      run: echo "${{ secrets.SSH_KEY }}" > impostor-terraform.pem

    # Rights on ssh key
    - name: chmod on ssh key
      run: chmod 400 impostor-terraform.pem

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -var-file="variables.tfvars"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -replace=aws_instance.ec2_server -input=false -var-file="variables.tfvars"

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.event_name == 'push'
      run: terraform apply -replace=aws_instance.ec2_server -auto-approve -input=false -var-file="variables.tfvars"
